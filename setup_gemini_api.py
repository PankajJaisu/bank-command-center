#!/usr/bin/env python3
"""
Setup script to configure Gemini API key for Proactive Loan Command Center
"""

import os
from pathlib import Path

def setup_gemini_api():
    """Setup Gemini API key in .env file"""
    
    # Check if .env file exists
    env_file = Path(".env")
    
    print("🔧 Proactive Loan Command Center - Gemini API Setup")
    print("=" * 50)
    
    # Read existing .env file if it exists
    existing_env = {}
    if env_file.exists():
        print(f"✅ Found existing .env file")
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_env[key.strip()] = value.strip().strip('"').strip("'")
    else:
        print("📝 Creating new .env file")
    
    # Check current API key
    current_key = existing_env.get('GEMINI_API_KEY', '')
    if current_key and current_key != '':
        print(f"🔑 Current API key: {current_key[:10]}...{current_key[-4:] if len(current_key) > 14 else current_key}")
        
        update = input("Do you want to update the existing API key? (y/N): ").lower().strip()
        if update != 'y':
            print("✅ Keeping existing API key")
            return
    
    # Get new API key
    print("\n📋 To get your Gemini API key:")
    print("1. Go to https://aistudio.google.com/app/apikey")
    print("2. Sign in with your Google account")
    print("3. Click 'Create API key'")
    print("4. Copy the generated API key")
    print()
    
    api_key = input("Enter your Gemini API key: ").strip()
    
    if not api_key:
        print("❌ No API key provided. Exiting.")
        return
    
    # Validate API key format (basic check)
    if len(api_key) < 20:
        print("⚠️  Warning: API key seems too short. Please verify it's correct.")
    
    # Update .env file
    existing_env['GEMINI_API_KEY'] = api_key
    
    # Write updated .env file
    with open(env_file, 'w') as f:
        f.write("# Proactive Loan Command Center Configuration\n")
        f.write("# Generated by setup_gemini_api.py\n\n")
        
        # Write Gemini API key first
        f.write("# Google Gemini AI Configuration\n")
        f.write(f'GEMINI_API_KEY="{api_key}"\n\n')
        
        # Write other existing variables
        for key, value in existing_env.items():
            if key != 'GEMINI_API_KEY':
                f.write(f'{key}="{value}"\n')
        
        # Add default database URL if not present
        if 'DATABASE_URL' not in existing_env:
            f.write('\n# Database Configuration\n')
            f.write('DATABASE_URL="sqlite:///./ap_data.db"\n')
    
    print(f"✅ Successfully updated .env file")
    print(f"🔑 API key configured: {api_key[:10]}...{api_key[-4:]}")
    
    # Test the configuration
    print("\n🧪 Testing API configuration...")
    try:
        from app.config import settings
        if settings.gemini_api_key == api_key:
            print("✅ Configuration loaded successfully")
        else:
            print("⚠️  Configuration may need restart to take effect")
    except Exception as e:
        print(f"⚠️  Could not test configuration: {e}")
    
    print("\n🚀 Next steps:")
    print("1. Restart your application server")
    print("2. Try uploading a PDF document")
    print("3. Check the logs for any remaining issues")
    print("\n📖 For more help, see: https://github.com/your-repo/ap-command-center")

if __name__ == "__main__":
    setup_gemini_api()
