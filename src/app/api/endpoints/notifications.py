# src/app/api/endpoints/notifications.py

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List

from app.api.dependencies import get_db
from app.db import models, schemas

router = APIRouter()


@router.get(
    "/", response_model=List[schemas.Notification], summary="Get All Notifications"
)
def get_notifications(db: Session = Depends(get_db)):
    """
    Retrieves all unread, high-priority notifications generated by the
    proactive intelligence engine.
    """
    return (
        db.query(models.Notification)
        .filter(models.Notification.is_read == 0)
        .order_by(models.Notification.created_at.desc())
        .all()
    )


@router.post("/{notification_id}/mark-read", summary="Mark a Notification as Read")
def mark_notification_as_read(notification_id: int, db: Session = Depends(get_db)):
    """
    Marks a specific notification as read so it no longer appears in the main list.
    """
    notification = (
        db.query(models.Notification)
        .filter(models.Notification.id == notification_id)
        .first()
    )
    if not notification:
        raise HTTPException(status_code=404, detail="Notification not found")

    notification.is_read = 1
    db.commit()
    return {"message": "Notification marked as read."}
